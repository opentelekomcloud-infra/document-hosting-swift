apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "document-hosting-swift.fullname" . }}
  labels:
    {{- include "document-hosting-swift.labels" . | nindent 4 }}
data:
  nginx-site.conf: |
    upstream backend {
    #this is one of the swift proxy server
      server {{ .Values.config.swift_server }};
    }
    
    proxy_temp_path /var/cache/nginx/proxy_temp_dir;
    proxy_cache_path /var/cache/nginx/proxy_cache_dir levels=1:2 keys_zone=staticcache:180m inactive=1d max_size=500m;
    
    server_names_hash_bucket_size 128;

    server {
      #skip some normal config like listen, log
      server_name {{ .Values.config.server_name }};
      access_log /dev/stdout ;
      error_log /dev/stdout debug;
      #set proxy cache config, you can find all these command in nginx wiki page
      proxy_set_header Host $host;
      proxy_set_header Accept "*/*";
      proxy_cache_valid 200 1d;
      proxy_read_timeout 120;
      proxy_send_timeout 120;
      proxy_cache_key "$host$uri";
      proxy_cache_methods GET;
      proxy_intercept_errors on;
      #set a return http header of cache status, so that you can see the status of file cache
      add_header X-Cache $upstream_cache_status;
      
      error_page 401 404 /custom_404.html;
        location = /custom_404.html {
                root /usr/share/nginx/html;
                internal;
        }
      
      location / {
        #default subsite 
        rewrite ^/$ https://$server_name/{{ .Values.config.default_uri }}/index.html redirect;
        #redirect to index.html with uri ending with /
        rewrite ^(.+)/$ https://$server_name$1/index.html redirect;
        #redirect to /index.html with uri ending without slash
        rewrite ^(.*/[^./]+)$ https://$server_name$1/index.html redirect;
        index index.html index.htm;
        proxy_pass https://backend/v1/AUTH_{{ .Values.config.project_id }}/;
        proxy_cache staticcache;
      }
    }
  custom_404.html: |
    <h1>{{ .Values.config.message_404 }}</h1>
